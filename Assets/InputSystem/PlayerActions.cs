//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""PLAYER"",
            ""id"": ""6691ab7d-5480-4385-8f9c-9b6a22838ed9"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""8aadb7d7-734a-45b4-a699-5a19719f380a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BadAnswer"",
                    ""type"": ""Button"",
                    ""id"": ""95e34a5f-bd0a-41d2-8b64-a747357bedcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoodAnswer"",
                    ""type"": ""Button"",
                    ""id"": ""d600b865-92e3-46a3-b5aa-a8877df24758"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""77566de5-7cf6-4bb7-a651-165a53de6b80"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""b302cb7b-a52c-4668-97c1-75166dc7d8c6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""8074dd7f-c31c-48b1-8068-992c382592a6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8e8b4727-8538-451a-8ece-8d76ba9f6712"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BadAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89b1c8b1-905a-4e33-89cc-c27fcc8a97b1"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoodAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PLAYER
        m_PLAYER = asset.FindActionMap("PLAYER", throwIfNotFound: true);
        m_PLAYER_Movement = m_PLAYER.FindAction("Movement", throwIfNotFound: true);
        m_PLAYER_BadAnswer = m_PLAYER.FindAction("BadAnswer", throwIfNotFound: true);
        m_PLAYER_GoodAnswer = m_PLAYER.FindAction("GoodAnswer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PLAYER
    private readonly InputActionMap m_PLAYER;
    private IPLAYERActions m_PLAYERActionsCallbackInterface;
    private readonly InputAction m_PLAYER_Movement;
    private readonly InputAction m_PLAYER_BadAnswer;
    private readonly InputAction m_PLAYER_GoodAnswer;
    public struct PLAYERActions
    {
        private @PlayerActions m_Wrapper;
        public PLAYERActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PLAYER_Movement;
        public InputAction @BadAnswer => m_Wrapper.m_PLAYER_BadAnswer;
        public InputAction @GoodAnswer => m_Wrapper.m_PLAYER_GoodAnswer;
        public InputActionMap Get() { return m_Wrapper.m_PLAYER; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PLAYERActions set) { return set.Get(); }
        public void SetCallbacks(IPLAYERActions instance)
        {
            if (m_Wrapper.m_PLAYERActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PLAYERActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PLAYERActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PLAYERActionsCallbackInterface.OnMovement;
                @BadAnswer.started -= m_Wrapper.m_PLAYERActionsCallbackInterface.OnBadAnswer;
                @BadAnswer.performed -= m_Wrapper.m_PLAYERActionsCallbackInterface.OnBadAnswer;
                @BadAnswer.canceled -= m_Wrapper.m_PLAYERActionsCallbackInterface.OnBadAnswer;
                @GoodAnswer.started -= m_Wrapper.m_PLAYERActionsCallbackInterface.OnGoodAnswer;
                @GoodAnswer.performed -= m_Wrapper.m_PLAYERActionsCallbackInterface.OnGoodAnswer;
                @GoodAnswer.canceled -= m_Wrapper.m_PLAYERActionsCallbackInterface.OnGoodAnswer;
            }
            m_Wrapper.m_PLAYERActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @BadAnswer.started += instance.OnBadAnswer;
                @BadAnswer.performed += instance.OnBadAnswer;
                @BadAnswer.canceled += instance.OnBadAnswer;
                @GoodAnswer.started += instance.OnGoodAnswer;
                @GoodAnswer.performed += instance.OnGoodAnswer;
                @GoodAnswer.canceled += instance.OnGoodAnswer;
            }
        }
    }
    public PLAYERActions @PLAYER => new PLAYERActions(this);
    public interface IPLAYERActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnBadAnswer(InputAction.CallbackContext context);
        void OnGoodAnswer(InputAction.CallbackContext context);
    }
}
